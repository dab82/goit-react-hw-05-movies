{"version":3,"file":"static/js/170.059c4b61.chunk.js","mappings":"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","sources":["common/Style.js","components/MovieCast/CastStyled.jsx","components/slider/slider.jsx","components/MovieCast/Cast.jsx","services/movieApi.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nconst Section = styled.section`\n  display: flex;\n  margin-top: 15px;\n  margin-right: auto;\n  margin-left: auto;\n  justify-content: center;\n`;\n\nconst Title = styled.h1`\n  text-align: center;\n  font-size: 28px;\n  margin-bottom: 10px;\n  color: ${props => props.theme.colors.primaryText};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst LinkStyled = styled(NavLink)`\n  text-decoration: none;\n`;\n\nconst CardInfoContainer = styled.div`\n  padding: 0 10px;\n`;\n\nconst MainMovieTitle = styled.h2`\n  font-size: 26px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  color: ${props => props.theme.colors.primaryText};\n`;\n\nconst SecondaryMovieTitle = styled.h3`\n  font-size: 16px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  color: ${props => props.theme.colors.primaryText};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst MovieList = styled.ul`\n  display: grid;\n  max-width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  grid-gap: 24px;\n  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\n`;\n\nconst MovieItem = styled.li`\n  width: 100%;\n  display: block;\n  padding: 5px;\n  background-color: ${props => props.theme.colors.buttonBg};\n  transform: scale(1);\n  transition: transform 250ms linear;\n  border-radius: 15px 15px 0 0;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  :hover,\n  :focus {\n    transform: scale(1.05);\n    cursor: pointer;\n  }\n`;\n\nconst MovieText = styled.p`\n  margin-bottom: 10px;\n  color: ${props => props.theme.colors.active};\n  font-size: 14px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst Img = styled.img`\n  border-radius: 15px 15px 0 0;\n  max-width: 300px;\n`;\n\nconst ImageFilm = styled.img`\n  border-radius: 15px 15px 0 0;\n  width: 100%;\n`;\n\nexport {\n  CardInfoContainer,\n  Title,\n  MainMovieTitle,\n  LinkStyled,\n  SecondaryMovieTitle,\n  MovieList,\n  MovieItem,\n  MovieText,\n  Img,\n  ImageFilm,\n  Section,\n};\n","import styled from 'styled-components';\n\nexport const CastItem = styled.div`\n  padding: 5px;\n  background-color: ${props => props.theme.colors.buttonBg};\n  margin-right: 10px;\n\n  border-radius: 15px 15px 0 0;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  :hover,\n  :focus {\n    cursor: pointer;\n  }\n`;\n\nexport const ImageCast = styled.img`\n  border-radius: 15px 15px 0 0;\n  margin-right: auto;\n  margin-left: auto;\n  width: 100%;\n`;\n","export const setSliderSettings = actors => {\n  const settings = {\n    speed: 500,\n    slidesToShow: 4,\n    swipeToSlide: true,\n  };\n\n  if (actors < 5) {\n    return { ...settings, slidesToShow: actors };\n  }\n  return settings;\n};\n","import PropTypes from 'prop-types';\nimport noPhoto from '../../images/noPhoto.png';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from '../../services/movieApi';\nimport { MovieText, Title, SecondaryMovieTitle } from '../../common/Style';\nimport { ImageCast, CastItem } from './CastStyled';\nimport { setSliderSettings } from '../slider/slider';\nimport Slider from 'react-slick';\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\n\nexport default function Cast() {\n  const [actors, setActors] = useState([]);\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    const fetch = async () => {\n      await fetchCast(moviesId).then(data => setActors(data.cast));\n    };\n    fetch();\n  }, [moviesId]);\n\n  if (actors.length === 0) {\n    return <Title>No actors for this movie</Title>;\n  }\n\n  return (\n    <>\n      <Slider {...setSliderSettings(actors.length)} width=\"100%\">\n        {actors &&\n          actors.map(({ id, character, name, profile_path }) => (\n            <CastItem key={id}>\n              {profile_path ? (\n                <ImageCast\n                  src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n                  alt=\"\"\n                />\n              ) : (\n                <ImageCast src={noPhoto} alt=\"\" />\n              )}\n              {name ? (\n                <SecondaryMovieTitle>{name}</SecondaryMovieTitle>\n              ) : (\n                <SecondaryMovieTitle>No actor`s name</SecondaryMovieTitle>\n              )}\n              {character ? (\n                <MovieText>{character}</MovieText>\n              ) : (\n                <MovieText>No actor`s character</MovieText>\n              )}\n            </CastItem>\n          ))}\n      </Slider>\n    </>\n  );\n}\n\nCast.propTypes = {\n  searchFilms: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      character: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string.isRequired,\n      backdrop_path: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import axios from 'axios';\n// import PropTypes from 'prop-types';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '02589241ae4d8ab43f8f4c55a27ffcb3';\n\nasync function fetchMovies(url = '', config = {}) {\n  const response = await axios.get(url, config);\n  return response.data;\n}\n\nexport function fetchTrendMovie() {\n  return fetchMovies(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\n}\n\nexport function fetchSearchMovie(query) {\n  return fetchMovies(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}&language=en-US&include_adult=false`\n  );\n}\n\nexport function fetchMovieDetails(moviesId) {\n  return fetchMovies(\n    `${BASE_URL}movie/${moviesId}?api_key=${KEY}&language=en-US`\n  );\n}\nexport function fetchCast(moviesId) {\n  return fetchMovies(\n    `${BASE_URL}movie/${moviesId}/credits?api_key=${KEY}&language=en-US&`\n  );\n}\n\nexport function fetchReviews(movieId) {\n  return fetchMovies(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&`\n  );\n}\n\n// fetchSearchMovie.propTypes = {\n//   search: PropTypes.string.isRequired,\n// };\n\n// fetchMovieDetails.propTypes = {\n//   id: PropTypes.number.isRequired,\n// };\n\n// fetchAboutMovie.propTypes = {\n//   id: PropTypes.number.isRequired,\n//   about: PropTypes.string.isRequired,\n// };\n"],"names":["Title","styled","props","theme","colors","primaryText","LinkStyled","NavLink","CardInfoContainer","MainMovieTitle","SecondaryMovieTitle","MovieList","MovieItem","buttonBg","MovieText","active","Img","ImageFilm","CastItem","ImageCast","setSliderSettings","actors","settings","speed","slidesToShow","swipeToSlide","Cast","useState","setActors","moviesId","useParams","useEffect","fetch","fetchCast","then","data","cast","length","width","map","id","character","name","profile_path","src","alt","noPhoto","BASE_URL","KEY","fetchMovies","url","config","axios","response","fetchTrendMovie","fetchSearchMovie","query","fetchMovieDetails","fetchReviews","movieId"],"sourceRoot":""}